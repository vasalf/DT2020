\import Utils
\open Nat \hiding (<=)

-- 1. Вселенные, полиморфизм по уровням.

-- Тип \Type0 содержит все типы, которые не упоминают \Type0.
-- Тип \Type1 содержит все типы, которые могут упоминать \Type0, но не \Type1.
-- И так далее. Тип \Type n содержит все типы, которые упоминают только \Type i для i < n.
-- Тип \Type i называется вселенной, а число i называется уровнем вселенной.
\func ttt : \Type2 => \Type0 -> \Type1

\func id (A : \Type) (a : A) => a

-- У каждого определения есть неявный параметр-уровень, к которому можно обратиться, написав \lp.
-- Например, функция id, определенная выше, эквивалентна такому определению:
\func id_ (A : \Type \lp) (a : A) => a

-- Когда мы пишем \Type без указания уровня, тайпчекер сам выводит минимальный подходящий уровень.
\func type : \Type => \Type

-- Например, в примере выше у \Type, который написан в теле функции, будет выведен уровень \lp.
-- У \Type, который написан в типе, уровень \lp не может быть, так как не верно, что \Type \lp : \Type \lp, поэтому он будет на 1 выше, то есть \suc \lp.
\func type_ : \Type (\suc \lp) => \Type \lp

-- На уровнях есть небольшой набор операций:
-- * Любое натуральное число является уровнем
-- * \suc l
-- * \max l1 l2
-- То есть любой уровень является либо константой, либо эквивалентен уровню вида \max (\lp + c) c', где c и c' -- константы, а \lp + c -- это уровень вида \suc (\suc ... (\suc \lp) ... ).
-- Уровень пи-типов и других конструкций над типами -- это максимум из уровней типов, входящих в эту конструкцию.
\func test0 : \Type (\max (\suc (\suc \lp)) 4) => \Type (\max \lp 3) -> \Type (\suc \lp)

-- Когда мы определяем полиморфную функцию, такую как id, мы хотим, чтобы тип A мог лежать в любой вселенной.
-- Поэтому все функции (и остальные определения) полиморфны по уровню вселенной, в которой они лежат.
\func id'' (A : \Type) (a : A) => a

-- Еще несколько примеров:
\func test1_ => id Nat 0
\func test2_ => id \Type0 Nat
\func test3 => id (\Type0 -> \Type1) (\lam X => X)
\func test4 => id _ id
\func test4' => id (\Pi (A : \Type) -> A -> A) id

-- При обращении к определению можно явно указать его уровень, то есть чему будет равен параметр \lp:
\func test5 => id (\Type \lp) Nat
-- Либо так:
\func test5' => id (\level (\suc \lp) _) (\Type \lp) Nat
-- Второй вариант синтаксиса полезен когда уровень является константой:
\func test6 => id (\level 2 _) \Type1 \Type0
-- Если при обращению к определению уровень не указан явно, он будет выведен автоматически как и в случае с \Type.
-- В большинстве случаев нет необходимости указывать уровень явно.

-- Параметры \data не влияют на его уровень.
\data Magma' (A : \Type \lp)
  | con (A -> A -> A)

\func test7 : \Type \lp => Magma' \lp Nat

-- Уровень класса зависит от того, какие поля реализованы.
\class Magma (A : \Type)
  | \infixl 6 ** : A -> A -> A

-- Например, уровень Magma \lp -- это \Type (\suc \lp), так как в определении Magma \lp появляется вселенная \Type \lp.
\func test8 : \Type (\suc \lp) => Magma \lp

-- Но уровень Magma \lp Nat -- это просто \Type 0, так как в нереализованных полях Magma Nat не встречаются вселенные.
\func test9 : \Type \lp => Magma \lp Nat

\class Functor (F : \Type -> \Type)
  | fmap {A B : \Type} : (A -> B) -> F A -> F B

-- Уровень Functor \lp будет \Type (\suc \lp) даже если поле F реализовано, так как в поле fmap тоже появляется \Type \lp.

\func test10 : \Type (\suc \lp) => Functor \lp

\func test11 : \Type (\suc \lp) => Functor \lp Maybe

-- 2. Принципы индукции.

-- Элиминатор для рекурсивного типа данных -- это просто принцип индукции для него.
-- Мы можем определять свои принципы индукции, которые удобнее использовать, чем стандартные.
-- Например, для натуральных чисел мы можем определить принцип индукции, который позволяет использовать индукционную гипотезу для любого числа, меньшего данного, а не только для числа, меньшего на 1.
\func Nat-ind
  (E : Nat -> \Type)
  (r : \Pi (n : Nat) -> (\Pi (k : Nat) -> k < n -> E k) -> E n)
  (n : Nat) : E n => aux E r (suc n) n <=-refl
  \where {
    \func aux
      (E : Nat -> \Type)
      (r : \Pi (n : Nat) -> (\Pi (k : Nat) -> k < n -> E k) -> E n)
      (n m : Nat) (p : m < n) : E m \elim n, p
      | suc n, suc<=suc m<=n => r m (\lam k k<m => aux E r n k (<=-trans k<m m<=n))
  }

-- 3. Индукция-рекурсия

-- Рекурсия-рекурсия -- это принцип, позволяющий определять взаимно рекурсивные функции.
-- Пример: функции isEven и isOdd.
\func isEven (n : Nat) : Bool
  | 0 => true
  | suc n => isOdd n

\func isOdd (n : Nat) : Bool
  | 0 => false
  | suc n => isEven n

-- Индукция-индукция -- это принцип, позволяющий определять взаимно рекурсивные типы данных.
-- Когда мы определяем взаимно рекурсивный тип данных, нужно явно указывать его тип.
-- Пример: типы IsEven и IsOdd.
\data IsEven (n : Nat) : \Type \with
  | 0 => zero-isEven
  | suc n => suc-isEven (IsOdd n)

\data IsOdd (n : Nat) : \Type \with
  | suc n => suc-isOdd (IsEven n)

-- Индукция-рекурсия -- это принцип, позволяющий определять тип данных, взаимно рекурсивный с функцией.
-- Мы увидим пример такого определения ниже.

-- 4. Вселенные.

-- \Type0 -- это тип, элементы которого -- это малые типы.
-- Такой тип называется вселенной.
-- Мы можем определить свою вселенную, состоящую только из определенного набора типов.

\data Type
  | nat
  | list Type
  | arr Type Type

-- Мы должны еще определить функцию, которая переводит элементы Type в настоящие типы.
\func El (t : Type) : \Type0 \elim t
  | nat => Nat
  | list t => List (El t)
  | arr t t1 => El t -> El t1

\func idc (t : Type) (x : El t) : El t => x

-- \func Arr (A B : \Type) => A -> B

-- \func Pi (A : \Type) (B : A -> \Type) => \Pi (x : A) -> B x

-- Если мы хотим определить вселенную, в которой у нас есть заисимые типы, то такое определение должно быть индуктивно-рекурсивным.
\data Type' : \Set0
  | nat'
  | list' Type'
  | pi (A : Type') (El' A -> Type')

\func El' (t : Type') : \Set0 \elim t
  | nat' => Nat
  | list' t => List (El' t)
  | pi A B => \Pi (x : El' A) -> El' (B x)

-- 5. Полнота спецификации.

-- Спецификация для некоторого значения a типа A -- это просто предикат вида P : A -> \Type.
-- То есть спецификация -- это просто свойство элемента, которое мы хотим про него доказать.

-- Спецификация корректна, если верно P a.
-- Спецификация полна, если P x влечет x = a для любого x : A.

-- Например, пусть у нас есть функция, вычисляющая факториал fac : Nat -> Nat.
-- P1 -- корретная спецификация для fac, но не полная.
-- \func P1 (f : Nat -> Nat) => f 3 = 6
-- P2 -- полная, но не корректная
-- \func P2 (f : Nat -> Nat) => Empty
-- P3 -- полная и корректная спецификация для fac.
-- \func P3 (f : Nat -> Nat) => \Sigma (f 0 = 1) (\Pi (n : Nat) -> f (suc n) = suc n * f n)

-- Полная и корректная спецификация для функции сортировки:
-- \func P (f : List A -> List A) => \Pi (xs : List A) -> \Sigma (isSorted (f xs)) (isPerm (f xs) xs)
-- где isSorted xs верно тогда и только тогда, когда список xs отсортирован, а isPerm xs ys верно тогда и только список xs является перестановкой списка ys.

-- Разумеется, мы хотим, чтобы спецификация была, по крайней мере, корректной.
-- Мы можем не требовать полноты, если полную спецификацию слишком сложно проверить, и нам достаточно истинности частичной спецификации.
-- Тем не менее полезно понимать когда спецификация является полной.

-- Есть простое необходимое (и достаточное для корректных спецификаций) условие полноты, которое не зависит от элемента, для которого задается спецификация:
-- \Pi (x y : A) -> P x -> P y -> x = y
-- То есть должно существовать не более одного элемента, на котором предикат верен.

-- 5. Корректность сортировки.

\func sort {A : TotalPreorder} (xs : List A) : List A
  | nil => nil
  | cons a xs => insert a (sort xs)
  \where
    \func insert {A : TotalPreorder} (a : A) (xs : List A) : List A \elim xs
      | nil => cons a nil
      | cons x xs => \case totality x a \with {
        | inl _ => cons x (insert a xs)
        | inr _ => cons a (cons x xs)
      }

\data Perm {A : \Type} (xs ys : List A) \elim xs, ys
  | nil, nil => perm-nil
  | cons x xs, cons y ys => perm-cons (x = y) (Perm xs ys)
  | cons x (cons x' xs), cons y (cons y' ys) => perm-swap (x = y') (x' = y) (xs = ys)
  | xs, ys => perm-trans {zs : List A} (Perm xs zs) (Perm zs ys)

\func perm-refl {A : \Type} {xs : List A} : Perm xs xs \elim xs
  | nil => perm-nil
  | cons a l => perm-cons idp perm-refl

\func sort-perm {A : TotalPreorder} (xs : List A) : Perm xs (sort xs) \elim xs
  | nil => perm-nil
  | cons a l => perm-trans (perm-cons idp (sort-perm l)) (insert-perm a (sort l))
  \where {
    \func insert-perm {A : TotalPreorder} (a : A) (xs : List A)
      : Perm (cons a xs) (sort.insert a xs) \elim xs
      | nil => perm-cons idp perm-nil
      | cons b xs => \case totality b a \as r \return
                                          Perm (cons a (cons b xs)) (\case r \with {
                                            | inr _ => cons a (cons b xs)
                                            | inl _ => cons b (sort.insert a xs)
                                          }) \with {
        | inl b<=a => perm-trans (perm-swap idp idp idp) (perm-cons idp (insert-perm a xs))
        | inr a<=b => perm-refl
      }
  }

\func head {A : \Type} (x : A) (xs : List A) : A \elim xs
  | nil => x
  | cons a _ => a

\data Sorted {A : Preorder} (xs : List A) \elim xs
  | nil => sorted-nil
  | cons x xs => sorted-cons (x <= head x xs) (Sorted xs)

\func sort-sorted {A : TotalPreorder} (xs : List A) : Sorted (sort xs) \elim xs
  | nil => sorted-nil
  | cons a l => insert-sorted a (sort-sorted l)
  \where {
    \func insert-lem {A : TotalPreorder} (b a : A) (xs : List A)
                     (b<=a : b <= a) (b<=xs : b <= head b xs)
      : b <= head b (sort.insert a xs)
      \elim xs
        | nil => b<=a
        | cons x xs => \case totality x a \as r \return
                                          b <= head b (\case r \with {
                                            | inr _ => cons a (cons x xs)
                                            | inl _ => cons x (sort.insert a xs)
                                          }) \with {
          | inl _ => b<=xs
          | inr _ => b<=a
        }

    \func insert-sorted {A : TotalPreorder} (a : A) {xs : List A} (s : Sorted xs)
      : Sorted (sort.insert a xs)
      \elim xs
        | nil => sorted-cons <=-refl sorted-nil
        | cons b xs => \case totality b a \as r \return
                                          Sorted (\case r \with {
                                            | inr _ => cons a (cons b xs)
                                            | inl _ => cons b (sort.insert a xs)
                                          }) \with {
            | inl b<=a => \case s \with {
              | sorted-cons b<=xs s => sorted-cons (insert-lem b a xs b<=a b<=xs) (insert-sorted a s)
            }
            | inr a<=b => sorted-cons a<=b s
          }
  }


