\import Utils
\open Nat \hiding (<=)

-- 1. \elim или \case?

-- Функции f и f' эквивалентны, но в данной ситуации лучше использовать f', так как выражение вида f' n является нормальной формой, а выражение f n раскрывается в определение f, что менее удобно.
\func f (x : Nat) : Nat => \case x \with { zero => 0 | suc n => n }
\func f' (x : Nat) : Nat
  | zero => 0
  | suc n => n
\func g (n : Nat) => f' (n Nat.+ n)

-- 2. Еще примеры утверждений и доказательств: ассоциативность сложения натуральных чисел, инволютивность reverse.

-- Принцип конгруэнтности
-- \func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' => ...

-- Ассоциативность + доказывается индукцией по z (так как + определен рекурсией по правому аргументу).
\func +-assoc (x y z : Nat) : (x + y) + z = x + (y + z) \elim z
  | 0 => idp
  | suc z => pmap suc (+-assoc x y z)

-- Если определить функцию reverse через вспомогательную функцию с аккумулятором, то потом будет проще доказывать ее свойства.
\func reverse {A : \Type} (xs : List A) : List A
  => rev nil xs
  \where
    \func rev {A : \Type} (acc xs : List A) : List A \elim xs
      | nil => acc
      | cons x xs => rev (cons x acc) xs

-- reverse (cons x xs) => rev nil (cons x xs) => rev (cons x nil) xs
-- reverse (reverse (cons x xs)) =>
--   reverse (rev (cons x nil) xs) =>
--   rev nil (rev (cons x nil) xs)
--
-- Если попытаться доказать напрямую, что reverse (reverse xs) = xs, то нам нужно будет доказать, что rev nil (rev (cons x nil) xs) = cons x xs, но сделать это, используя индукционную гипотезу, не получится.
-- Нужно усилить утверждение, чтобы индукционная гипотеза тоже была бы более сильной.
-- Другими словами, мы будем доказывать более общее свойство reverse.rev, а через него уже свойство reverse.

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs
  => rev-aux nil xs
  \where {
    \open reverse
    \func rev-aux {A : \Type} (acc xs : List A) : reverse (rev acc xs) = rev xs acc \elim xs
      | nil => idp
      | cons x xs => rev-aux (cons x acc) xs
  }

-- 3. Рекурсивное определение vec, head, tail.

\func vec (A : \Type) (n : Nat) : \Type \elim n
  | 0 => \Sigma
  | suc n => \Sigma A (vec A n)

\func head {A : \Type} (n : Nat) (xs : vec A (suc n)) => xs.1

\func tail {A : \Type} (n : Nat) (xs : vec A (suc n)) => xs.2

-- 4. Индуктивное определиние Vec, head, tail, append, length.

-- Vec определен в Utils
\data Vec_ (A : \Type) (n : Nat) \elim n
  | 0 => vnil_
  | suc n => vcons_ A (Vec A n)

-- Конструкторы принимают параметры типа данных в качестве неявных аргументов.
\func emptyList => nil {Nat}
-- vnil {A : \Type} : Vec A 0
-- vcons {A : \Type} {n : Nat} : A -> Vec A n -> Vec A (suc n)

\func Head {A : \Type} {n : Nat} (xs : Vec A (suc n)) : A
  | vcons a _ => a

\func Tail {A : \Type} {n : Nat} (xs : Vec A (suc n)) : Vec A n
  | vcons _ xs => xs

\func first {A : \Type} {n : Nat} (xs : Vec A n) : Maybe A \elim n, xs
  | 0, vnil => nothing
  | suc _, vcons a _ => just a

\func append {A : \Type} {n m : Nat} (xs : Vec A n) (ys : Vec A m) : Vec A (m + n) \elim n, xs
  | 0, vnil => ys
  | suc n, vcons x xs => vcons x (append xs ys)

-- Очень полезная функция.
\func Fin-length {A : \Type} {n : Nat} (xs : Vec A n) => n

-- 5. Fin, toNat, lookup.

-- Тип n-элементных множеств можно определить различными способами.
-- Например, мы можем определить его как подтип натуральных чисел:
-- \func fin (n : Nat) => \Sigma (x : Nat) (T (x < n))

\func Fin' (n : Nat) : \Set
  | 0 => Empty
  | suc n => Maybe (Fin' n)

-- Еще его можно определить индуктивно:
\data Fin (n : Nat) \elim n
  | suc n => { fzero | fsuc (Fin n) }

-- Fin 0 -- пустой тип.
\func Fin-absurd {A : \Type} (x : Fin 0) : A

\func fin0_1 : Fin 1 => fzero
-- \func fin1_1 : Fin 1 => fsuc {?}

\func fin0 : Fin 3 => fzero
\func fin1 : Fin 3 => fsuc fzero
\func fin2 : Fin 3 => fsuc (fsuc fzero)
-- \func fin3 : Fin 3 => fsuc (fsuc (fsuc fzero))

-- В Fin 3 не более 3 элементов.
\func atMost3 (x : Fin 3) : Either (x = fin0) (Either (x = fin1) (x = fin2))
  | fzero => inl idp
  | fsuc fzero => inr (inl idp)
  | fsuc (fsuc fzero) => inr (inr idp)
  | fsuc (fsuc (fsuc ()))

\func toNat {n : Nat} (x : Fin n) : Nat \elim n, x
  | suc n, fzero => 0
  | suc n, fsuc x => suc (toNat x)

-- Безопасный lookup.
\func lookup {A : \Type} {n : Nat} (xs : Vec A n) (i : Fin n) : A \elim n, xs, i
  | suc n, vcons a v, fzero => a
  | suc n, vcons a v, fsuc x => lookup v x
