\import Utils
\open Nat \hiding (<=)

-- 1. Пустой и одноэлементный типы, пары и \Sigma-типы.

-- Одноэлементный тип соответствует истинному утверждению.
\data Unit | unit

-- Доказательство, что Unit верно.
\func Unit-proof : Unit => unit

-- Пустой тип соответствует ложному утверждению.
\data Empty

-- Доказательство, что из Empty следует что угодно.
\func absurd {A : \Type} (e : Empty) : A

\func absurd' {A : \Type} (e : Empty) : A \elim e
  | () -- абсурдный образец

-- \Sigma-тип эквивалентен очевидно определению пар.
-- \Sigma Nat Nat === \data Pair | pair Nat Nat
{- Haskell:
   (Nat,Nat) === data Pair = Pair Nat Nat
-}

\func pair : \Sigma Nat Nat => (0,1)
{- Haskell:
   pair :: (Nat,Nat)
   pair = (0,1)
-}

-- Проекции обозначаются p.1 и p.2
\func projSum (p : \Sigma Nat Nat) => p.1 + p.2
{- Haskell:
   projSum :: (Nat,Nat) -> Nat
   projSum p = fst p + snd p
-}

-- Есть зависимая версия \Sigma-типов, где типы последующих полей могут зависеть от предыдущих.
-- Например, элементы следующего \Sigma-типа -- это пары из натурального числа n и элемента типа n = n (т.е. доказательства, что n равно n).
-- \Sigma (n : Nat) (n = n) === \data Pair' | pair' (n : Nat) (n = n)

-- Одноэлементный тип -- частный случай \Sigma-типов.
\func unit'' : \Sigma => ()
{- Haskell:
   unit'' :: ()
   unit'' = ()
-}

-- 2. Пример утверждений и доказательств.

\func \infix 5 == (x y : Bool) : Bool
  | true, true => true
  | false, false => true
  | _, _ => false

-- Функция T превращает булевское значение в соответствующее ему утверждение (одноэлементный или пустой тип).
\func T (b : Bool) : \Type
  | true => \Sigma
  | false => Empty

-- Утверждение T (not (not x) == x) соответствует утверждению, что not (not x) равно x.
\func not-isInvolution (x : Bool) : T (not (not x) == x)
  | true => ()
  | false => ()

-- Мы не можем сразу вернуть (), так как T (not (not x) == x) не равно Unit.
-- \func not-isInvolution' (x : Bool) : T (not (not x) == x) => ()

-- Мы не можем доказать ложное утверждение таким образом.
-- \func not-isIdempotent (x : Bool) : T (not (not x) == not x)

-- Зато мы можем доказать, что оно ложно.
\func not-isIdempotent' (x : Bool) : T (not (not x) == not x) -> Empty
  | true => \lam x => x
  | false => absurd

-- Доказательство рефлексивности равенства аналогично not-isInvolution.
\func ==-refl (x : Bool) : T (x == x)
  | true => ()
  | false => ()

-- -> -- это независимые функции.
-- Например, && имеет тип Bool -> Bool -> Bool.
-- \Pi-типы обощают их.
-- Например, ==-refl имеет тип \Pi (x : Bool) -> T (x == x).
-- Если переменная объявленная в \Pi не используется, мы получаем обычный тип функций.
-- Например, тип Bool -> Bool -> Bool эквивалентен типу \Pi (_ _ : Bool) -> Bool.

-- Докажем, что для любого x : Bool существует y : Bool такой, что x == y.
-- Вместо квантора существования можно использовать \Sigma-тип.
\func lemma (x : Bool) : \Sigma (y : Bool) (T (x == y)) => (x, ==-refl x)

-- Следующая функция доказывает довольно бессмысленное утверждение "из того, что любой x : Bool равен себе, следует, что true равен true".
\func higherOrderFunc (f : \Pi (x : Bool) -> T (x == x)) => f true

-- 3. Тип равенств.

-- \func \infix 1 = {A : \Type} (a a' : A) : \Type => ...

-- Определять равенство так, как мы это делали выше, не удобно, так как нужно делать это для каждого типа и доказывать потом различные его свойства.
-- В Prelude объявлен тип равенства, который определен для всех типов сразу.
-- Пока мы не будем рассматривать его определение.
-- Всё, что нам понадобится пока, -- это доказательство рефлексивности, которое мы называем idp.

-- \func idp {A : \Type} {a : A} : a = a => ...

\func example : 1 Nat.+ 1 = 2 => idp

-- Доказать, что not является инволюцией можно также как и раньше.
\func not-isInvolution_ (x : Bool) : not (not x) = x
  | true => idp
  | false => idp

-- Доказать ложное утверждение мы всё еще не можем.
\func not-isIdempotent_ (x : Bool) : not (not x) = not x
  | true => {?} -- Здесь нужно доказать, что true = false, что невозможно.
  | false => {?} -- Здесь нужно доказать, что false = true, что невозможно.

-- Доказательства других двух утверждений, доказанных ранее, выглядят аналогично.
\func lemma_ (x : Bool) : \Sigma (y : Bool) (x = y) => (x, idp)

\func higherOrderFunc_ (f : \Pi (x : Bool) -> x = x) => f true

-- 4. Синонимы типов.

-- В языке с зависимыми типами не нужны синонимы типов, т.к. мы можем просто определить функцию, возвращающую нужный тип.
\func NatList => List Nat
{- Haskell:
   type NatList = List Nat
-}

-- 5. Пространства имен и модули.

-- \where в отличии от хаскелла относится не к отдельной клозе, а ко всему определению.
\func fff (x : Nat) => ggg
  \where \func ggg => 0
-- Функции, определенные в \where, почти ничем не отличаются от обычных функций.
-- Единственное отличие заключается в том, что они находятся в другом пространстве имен.
\func gggTest => fff.ggg

-- Сноска
-- Можно использовать \let, который несколько проще, чем в хаскелле.
-- В arend нельзя определять рекурсивные функции в \let и переменные могут ссылаться только на предыдущие переменные.
\func letExample (p : \Sigma Nat Nat) =>
  \let | x => 1
       | y => x + x
       | (a,b) => p
  \in x + y * y + a * b

-- Модули используются для группирования определений.
\module M1 \where {
    \func f => 82
    \func g => 77
    \func h => 25
}

-- Определения f, g и h недоступны в текущем простраснтве имен.
-- К ним нужно обращаться через M1.
\func moduleTest => (M1.f,M1.g,M1.h)

\module M2 \where {
    -- Если открыть модуль, то можно обращаться к его содержимому напрямую.
   \open M1
   \func t => f
   \func t' => g
   \func t'' => h
}

\module M3 \where {
    -- Можно открыть только часть определений в модуле.
   \open M1(f,g)
   \func t => f
   \func t' => g
   \func t'' => M1.h -- К остальным определениям всё ещё можно доступаться по полному имени.
}

\module M4 \where {
    -- Каждому определению тоже соответствует модуль.
   \func functionModule => 34
     \where {
       \func f1 => 42
       \func f2 => 61
       \func f3 => 29
     }
   \func t => functionModule.f1
   \func t' => functionModule.f2
   \func t'' => (f1, f3)
     \where \open functionModule(f1,f3) -- данный \open относится ко всему, что объявленно в \where-блоке для t'', а также к самому t''.
}

\module M5 \where {
    -- Если определения в двух модулях повторяются, то можно их либо скрыть, либо переименовать.
    \open M2 \hiding (t') -- открыть все определения кроме t'
    \open M3 (t \as M3_t) -- открыть только t, переименовав в M3_t.
    \open M4 \using (t \as M4_t) -- открыть все определения, переименовав t в M4_t.
    \func t'' => (M3_t, M4_t, t', t, functionModule, functionModule.f1, functionModule.f2, functionModule.f3)
    \func t''' => (t'', M2.t'', M4.t'') -- t'' в текущем модуле перекрывает t'' из M2 и M4, но к ним всё ещё можно доступаться по полному имени.
}

-- \import X делает файл X видимым в текущем файле.
-- Также \import делает \open.
-- Все конструкции, которые есть для \open, также доступны для \import.

\import Test (foobar \as foobar', foobar3)
\import TestDir.Test
-- Если нужно только сделать файл видимым, но не открывать его содержимое, можно использовать следующую конструкцию:
\import TestDir.Test2()

\func fileTest => (foobar, foobar', Test.foobar1, Test.foobar2, Test.foobar3, TestDir.Test2.foobar)
