\import Utils
\import lect06 \hiding (<=-refl)
\import hw07

-- 1. \data Pair, проекции.

-- Мы можем определить тип пар натуральных чисел через \data.
\data NatPair | natPair Nat Nat

-- Проекции можно определить через паттерн матчинг.
\func natFst (p : NatPair) : Nat
  | natPair x _ => x

\func natSnd (p : NatPair) : Nat
  | natPair _ y => y

-- \func pair-lem (x : NatPair) : x = natPair (natFst x) (natSnd x) => idp

-- 2. Эта-эквивалентность для \Pi-типов, \Sigma-типов, \record.

-- Если у типа ровно один конструктор, то для него можно определить эта-эквивалентность.

-- Например, для \Pi-типов она говорит, что (\lam x => f x) == f.
\func etaPi {A : \Type} (B : A -> \Type) (f : \Pi (x : A) -> B x)
  : f = (\lam x => f x) => idp

\data TUnit | tunit

-- \func unit-lem (x : TUnit) : x = tunit => idp
\func sigma-lem (x : \Sigma) : x = () => idp

-- Для \Sigma-типов она говорит, что (p.1,p.2) == p.
\func etaSigma {A : \Type} (B : A -> \Type) (p : \Sigma (x : A) (B x))
  : p = (p.1,p.2) => idp

-- Если бы эта-эквивалентности не было в языке, это равенство всё равно можно было бы доказать при помощи паттерн матчинга.
\func etaSigma' {A : \Type} (B : A -> \Type) (p : \Sigma (x : A) (B x)) : p = (p.1,p.2) \elim p
  | (a,b) => idp

-- Для типа пар определенного выше эта-эквивалентности нет, поэтому единственный способ доказать ее -- это использовать паттерн матчинг.
\func etaNatPair (p : NatPair) : p = natPair (natFst p) (natSnd p)
  | natPair x y => idp

-- 3. \record Pair, \new, \cowith, проекции, паттерн матчинг.

-- Records -- это \Sigma-типы с именованными полями.
\record NatPair'
  | fst : Nat
  | snd : Nat

-- Любое поле -- это просто функция, которая первым неявным параметром прнимает инстанс рекорда.
-- fst : \Pi {x : NatPair'} -> Nat
\func foo (p : NatPair') => fst {p}

-- Поля также лежат внутри модуля, соответствующего рекорду.
\func foo' (p : NatPair') => NatPair'.fst {p}

-- Можно использовать синтаксис через точку, но только если слева от точки стоит переменная и ее тип указан явно.

\func bar (p : NatPair') => p.snd

-- (f x).snd -- Так нельзя. Это можно заменить одним из следующих способов:
-- \lam x => x.snd
-- \let e : NatPair' => f x \in e.snd
-- snd {f x}

-- Следующий код не будет тайпчекаться, так как тип p не указан явно.
-- \func baz {p p' : NatPair'} (q : p = p') => pmap (\lam p => p.fst) q

-- Для создания элемента рекорда можно использовать ключевое слово \new.
\func zeroPair => \new NatPair' {
  | fst => 0
  | snd => 0
}

-- Для рекордов есть эта-эквивалентность.
\func etaNatPair' (p : NatPair') : p = \new NatPair' { | fst => p.fst | snd => p.snd }
  => idp

\func foobar (p : NatPair') => fst {p} Nat.+ p.snd

\func foobar' (p : NatPair') : Nat
  | (a,b) => a Nat.+ b

-- Вместо \new можно использовать ключевое слово \cowith.
-- При этом мы говорим, что функция определяется при помощи копаттерн матчинга.
-- Для этого функция должна возвращать элемент некоторого рекорда.
-- После ключевого слова \cowith мы пишем список полей рекорда и значений, соответствующих этим полям.
\func zeroPair' : NatPair' \cowith
  | fst => 0
  | snd => 0

-- 4. Частичная реализация.

-- Можно использовать частичную реализацию классов.
-- Если C -- рекорд с полями f_1, ... f_n, то мы можем писать C { | f_{i_1} => e_{i_1} ... | f_{i_k} => e_{i_k} } для рекорда, где часть полей реализована указанным образом.
-- Например, NatPair' { | fst => 0 } -- это тип рекордов, где первое поле равно 0.
-- Такой тип эквивалентен просто типу второго поля, то есть натуральным числам.
-- Мы будем называть такие типы анонимными расширениями.
\func PartialEx : \Type => NatPair' { | fst => 0 }

\func ppp : NatPair' { | fst => 0 } => \new NatPair' { | snd => 1 }

-- На рекордах (и их анонимных расширениях) есть отношение подтипизации.
-- Если p имеет тип C { ... }, где реализованы какие-то поля, то он имеет и тип C { ... }, где реализовано подмножество этих полей.
-- Например:
\func partial (p : NatPair' { | fst => 0 | snd => 1 }) : PartialEx => p

\func PartialEx' => NatPair' { | fst => 3 | snd => 7 }

-- Оператор \new принимает произвольное выражение, которое должно вычисляться либо в рекорд, либо в его анонимное расширение.
-- Причем, должно быть верно, что все поля в этом рекорде/расширении реализованы.
\func new => \new PartialEx'
-- \new E : E
-- NatPair' { } == NatPair'

-- 5. Параметры, видимость полей.

-- Рекорды могут быть параметризованы.
\record Pair (A B : \Type)
  | fst_ : A
  | snd_ : B

-- Создавать элементы такого рекорда можно при помощи \new или \cowith как и раньше.
\func pairExample : Pair Nat (Nat -> Nat)
  => \new Pair { | fst_ => 1 | snd_ (x : Nat) => x }

-- На самом деле параметры рекорда являются его полями.
-- Пример выше эквивалентен следующему коду:
\func pairExample'
  => \new Pair { | A => Nat | B => Nat -> Nat | fst_ => 1 | snd_ (x : Nat) => x }

\func pairExample''
  => \new Pair Nat (Nat -> Nat) 1 (\lam (x : Nat) => x)

-- Мы можем все поля рекорда определить как параметры.
-- Например, следующий тип эквивалентен типу NatPair, определенному выше:
\record NatPair'' (fst'' snd'' : Nat)

-- Мы можем всё еще использовать \new и \cowith для него:
\func natPair''ex => \new NatPair'' {
  | fst'' => 0
  | snd'' => 0
  }

-- И наоборот, тип Pair эквивалентен следующему типу:
{-
\record Pair'
  | A : \Type
  | B : \Type
  | fst_ : A
  | snd_ : B
-}

-- Единственное отличие параметров и полей -- это то, что параметры по умолчанию не видны снаружи от класса, а поля видны.
-- Мы всё еще можем сделать параметры видимыми при помощи инструкции \open:
-- \open NatPair''
-- Либо мы можем обращаться к ним по полному имени:
\func natPair''foo => NatPair''.fst''

-- Верно и орабтное.
-- Если рекорд объявлен с полями, мы всё еще можем передавать их как аргументы при вызове:
\func natPairEx => \new NatPair' 0 0

-- То есть между полями и параметрами рекорда нет почти никакой разницы.

-- 6. Dependent records, тип положительных натуральных чисел.

\func isPos (n : Nat) : Bool
  | 0 => false
  | suc _ => true

-- Рекорды могут быть зависимыми, то есть типы полей могут зависеть от предыдущих полей.
-- Таким образом, рекорды полностью эквивалентны \Sigma-типам.

-- Например тип положительных натуральных чисел, который в теории множеств записывается как { n : Nat | T (isPos n) }, можно определить либо как \Sigma-тип \Sigma (n : Nat) (T (isPos n)), либо как рекорд:
\record PosNat (n : Nat) (p : T (isPos n))

-- 7. Monoid.

-- Еще один пример зависимых рекордов -- это тип моноидов.
-- Вместо ключевого слова \record мы использовали \class.
-- Классы почти полностью эквивалентны рекордам, но они предоставляют некоторую дополнительную функциональность.
\class Monoid (A : \Type)
  | id : A
  | \infixl 6 * : A -> A -> A
  | *-assoc (x y z : A) : (x * y) * z = x * (y * z)
  -- equivalent to *-assoc : \Pi (x y z : A) -> (x * y) * z = x * (y * z)
  | id-left (x : A) : id * x = x
  | id-right (x : A) : x * id = x

-- При наследовании классов можно реализовывать некоторые поля, чтобы не приходилось их реализовывать в каждом инстансе.
\class CommMonoid \extends Monoid
  | *-comm (x y : A) : x * y = y * x
  | id-right x => *-comm x id *> id-left x

-- Мы можем использовать поля классов как и раньше:
\func baz (m : Monoid Nat 0 (Nat.+)) => m.*-assoc

-- 8. Классы, инстансы.

-- Отличие классов от рекодов заключается в том, что для классов реализован алгоритм вывода их инстансов наподобие того, как это сделано в хаскелле.
-- Мы можем определить инстанс класса следующим образом:

\instance NatMonoid : Monoid Nat
  | id => 0
  | * => Nat.+
  | *-assoc => {?}
  | id-left => {?}
  | id-right => {?}

\func example => (1 * 2) * 3

\instance NatMonoid' : Monoid Nat
  | id => 1
  | * => Nat.*
  | *-assoc => {?}
  | id-left => {?}
  | id-right => {?}

-- \instance NatMonoid'' : Monoid Nat 1 (Nat.*) {?} {?} {?}

-- Это не будет работать, т.к. он выбирает первый подходящий instance Monoid.
-- \func foooo (x : Nat) : 1 Nat.* x = x => id-left x
\func foooo' (x : Nat) : 0 Nat.+ x = x => id-left x

-- Инстансы являются обычными функциями.
\func instEx => NatMonoid.id-left

\func instExF (M : Monoid) => M.id

\func instEx' => instExF NatMonoid'

-- Поля класса имеют такой же тип как и поля рекорда:
-- * {M : Monoid} (x y : M.A) : M.A

-- Когда мы обращаемя к полю класса, первый неявный ищется среди доступных инстансов.
-- Доступными считаются только те инстансы, в которых классифицирующее поле равно подходящему типу.
-- Сейчас поле считается классифицирующим, если оно является первым явным параметром класса.
-- Например, в следующем примере первый неявный аргумент для * будет равен NatMonoid, так как это единственный инстанс моноида, в котором классифицирующее поле A равно Nat, типу аргументов этой функции.
\func f (x y : Nat) => x * y

\class Map \noclassifying {A B : \Type} (f : A -> B) {
  \func isInj : \Type => {?}
  \func prop1 (p : isInj) : 0 = 0 => {?}
  \func prop2 (p : isInj) : 1 = 1 => {?}
} \where {
  \func prop3 {this : Map} (p : isInj) : 1 = 1 => {?}
}

-- Классы можно использовать как классы типов в хаскелле.
-- Например, класс Eq можно записать следующим образом:
\class Eq' (A : \Type)
  | \infix 3 ==' (x y : A) : Bool

-- Функцию refl, которая в хасклее записывается следующим образом, можно описать двумя способами.
-- refl :: Eq a => a -> Bool
-- refl x = x ==' x
\func refl {A : \Type} {e : Eq' A} (a : A) => a ==' a

\func refl' {E : Eq'} (a : E) => a ==' a

-- \func xxxx => refl 1

-- 9. Разрешимое равенство.

-- Мы можем определить класс типов, являющийся аналогом Eq в хаскелле, но в котором вместо функции == : A -> A -> Bool будет хранится доказательство, что равенство разрешимо.
-- Это лучше, так как в хаскелле в качестве == мы можем написать вообще произвольную функцию, даже такую, которая не имеет никакого смысла.
-- А при таком определении Eq функция равенства всегда будет определена корректно.
\class Eq (A : \Type) {
  | decideEq (a a' : A) : Decide (a = a')
  -- Функции, объявленные внутри класса принимают неявно инстанс этого класса в качестве первого аргумента.
  \func \infix 4 == (a a' : A) : Bool => \case decideEq a a' \with {
    | yes _ => true
    | no _ => false
  }
} \where {
  -- Функция == выше полностью эквивалентна функции =='.
  \func \infix 4 ==' {e : Eq} (a a' : e.A) : Bool => {?}
}

\open Eq(==)

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

-- Докажем, что равенство натуральных чисел разрешимо.
\instance NatEq : Eq Nat
  | decideEq (x y : Nat) : Decide (x = y) \with {
    | 0, 0 => yes idp
    | 0, suc m => no (\lam p => suc/=0 (sym p))
    | suc n, 0 => no suc/=0
    | suc n, suc m => \case decideEq n m \with {
      | yes p => yes (pmap suc p)
      | no p => no (\lam q => p (pmap pred q))
    }
  }

\func test1 : (0 == 0) = true => idp
\func test2 : (0 == 1) = false => idp

-- 10. Classifying field.

-- Классицирующее поле обадает рядом дополнительных свойств.
-- Например, если в некотором месте ожидается элемент типа X, а передается элемент класса C, классифицирующее поле которого имеет тип X, оно будет неявно вставленно вместо этого значения.
-- Например, в следующем примере вместо M будет вставлено M.A, так как в этом месте ожидается элемент типа \Type, а передается элемент типа Monoid.
\func foobarbaz (M : Monoid) (x : M) => x

\data XXX | con

-- Кроме классифицирующих полей можно создавать собственные функции, преобразующии элемент одного типа в другой.
-- Для этого нужно в \where блоке к классу, рекорду или \data определить функцию при помощи ключевого слова \coerce вместо ключевого слова \func.
\data YYY | con' XXX Nat | con''
  \where {
    -- Можно преобразовывать либо к данному типу.
    -- При этом, функция должна возвращать элемент этого типа.
    \use \coerce fromXXX (x : XXX) => con' x 0

    -- Либо можно преобразовывать из данного типа.
    -- При этом функция должна принимать элемент данного типа в качестве последнего параметра.
    \use \coerce toXXX (y : YYY) => con
  }

\func fff (y : YYY) => y

-- Теперь элементы типа XXX неявно преобразуются к элементам типа YYY при помощи функции fromXXX.
\func ggg => fff con

-- Преобразование натуральных чисел к Int выполнено именно таким образом:
\func hhh : Int => 0

-- 11. \extends, diamond problem.

-- Рекорды и классы можно наследовать.
\record Base (A : \Type)

\record Base' (A : \Type)

\record X \extends Base
  | a : A

\record Y \extends Base'
  | b : A

-- При этом имена и типы полей ни на что не влияют.
-- В рекорде Z будет четыре поля: Base.A, Base'.A, a и b.
\record Z \extends X, Y

\func zzz => \new Z {
  | A => {?}
  | a => {?}
  | Base'.A => {?}
  | b => {?}
}

\func zzzz (z : Z) => Base'.A {z}

-- Но в рекорде Z' будет только три поля, так как поле A из рекорда Base является одним и тем же и в рекорде X', и в рекода Y':

\record X' \extends Base
  | aa : A

\record Y' \extends Base
  | bb : A

\record Z' \extends X', Y'

-- Например, тип колец можно реализовать следующим образом.
\class AbGroup \extends CommMonoid {
  | inverse : A -> A
  | inv-left (x : A) : inverse x * x = id
  | inv-right (x : A) : x * inverse x = id
}

-- Чтобы отличать структуру сложения от структуры умножения, мы не наследуемся от моноида, но добавляем его как поля.
-- При этом, подлежащий тип и группы по сложению и моноида по умножению должен быть одинаковый.
-- Поэтому мы указываем в типе mulMonoid, что поле подлежащего типа реализовано определенным образом, а конкретно как подлежащий тип группы по сложению.
\class Ring \extends AbGroup
  | mulMonoid : Monoid A

-- Определим еще один тип абелевых групп, который не наследует моноиды.
\class AbGroup' (A : \Type) {
  -- Здесь нужно перечислить все поля из Monoid, CommMonoid и AbGroup.
}

-- Если мы попытаеся определить тип колец следующим образом, то у нас ничего не получится, так как структуры сложения и умножения будут совпадать.
\class Ring' \extends AbGroup', Monoid
  | Monoid.A => AbGroup'.A

-- 12. Functor.

-- Еще один пример: класс функторов.
\class Functor (F : \Type -> \Type)
  | fmap {A B : \Type} (f : A -> B) : F A -> F B
  | fmap-id {A : \Type} (y : F A) : fmap (\lam (x : A) => x) y = y
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (y : F A)
    : fmap (\lam x => g (f x)) y = fmap g (fmap f y)

\instance ListFunctor : Functor List
  | fmap {A B : \Type} (f : A -> B) (xs : List A) : List B \elim xs {
    | nil => nil
    | cons a xs => cons (f a) (fmap f xs)
  }
  | fmap-id {A : \Type} (xs : List A) : fmap (\lam x => x) xs = xs \elim xs {
    | nil => idp
    | cons a xs => pmap (cons a) (fmap-id xs)
  }
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (xs : List A) : fmap (\lam x => g (f x)) xs = fmap g (fmap f xs) \elim xs {
    | nil => idp
    | cons a xs => pmap (cons (g (f a))) (fmap-comp f g xs)
  }

-- 13. Лямбда исчисление.

-- Term V -- тип термов, свободные переменные которых лежат в V.
\data Term (V : \Type)
  | var V
  | unit
  | app (Term V) (Term V)
  | lam (Term (Maybe V))

-- Отношение одношаговой редукции
\data Red1 {V : \Type} (t s : Term V) \elim t, s
  | app t1 t2, app s1 s2 => {
    | appLeft (Red1 t1 s1) (t2 = s2)
    | appRight (t1 = s1) (Red1 t2 s2)
  }
  | lam t, lam s => lamRed (Red1 t s)
  | app t a, s => beta (f : Term (Maybe V)) (lam f = t) ((f >>= maybe a var) = s)

-- Если red -- некоторое отношение на A, то элемент a : A называется достижимым, если не существует бесконечных цепочек редукций, начинающихся в a.
-- Это определение хорошо работает только классически, интуиционистски мы определяем предикат достижимости индуктивно.
-- В индуктивном построении будет всего одно правило: a -- достижим, если достижимы все a', к котором a редуцируется.
\data Acc {A : \Type} (red : A -> A -> \Type) (a : A)
  | acc (\Pi (a' : A) -> red a a' -> Acc red a')

-- Так как функция вычисления термов должна быть тотально, то мы определим ее только для достижимых термов.
-- Она будет дополнительно принимать стратегию редукции, то есть функцию, которая для каждого терма возвращает либо терм, к которому он редуцируется, либо доказательство, что таких термов нет.
-- Возвращает функция eval терм вместе с доказательством, что он находится в нормальной форме.
\func eval {V : \Type} (t : Term V) (a : Acc Red1 t)
           (str : \Pi (s : Term V) -> Decide (\Sigma (q : Term V) (Red1 s q)))
  : \Sigma (s : Term V) (\Pi (q : Term V) -> Not (Red1 s q)) \elim a
  | acc f => \case str t \with {
    | yes (t',r) => eval t' (f t' r) str
    | no c => (t, \lam q r => c (q,r))
  }

-- 14. Нейтральные термы.

-- Терм называется нейтральным, если он достижим и в голове не содержит лямбду.
-- Точнее предикат нейтральности определяется индуктивно:
\data Neutral {V : \Type} (t : Term V) \elim t
  | unit => unitNeutral
  | var _ => varNeutral
  | app t s => appNeutral (Neutral t) (Acc Red1 s)

-- Нейтральные термы замкнуты относительно редукций.
\func neutralRed {V : \Type} {t s : Term V} (r : Red1 t s) (n : Neutral t) : Neutral s \elim t, s, r, n
  | app _ s, _, beta f idp q, appNeutral () _
  | app t1 t2, app s1 s2, appLeft r1 idp, appNeutral n a => appNeutral (neutralRed r1 n) a
  | app t1 t2, app s1 s2, appRight idp r2, appNeutral n (acc f) => appNeutral n (f s2 r2)

-- Нейтральные термы действительно достижимы.
\func neutralAcc {V : \Type} {t : Term V} (n : Neutral t) : Acc Red1 t \elim t, n
  | unit, unitNeutral => acc (\lam s r => \case r \with {})
  | var v, varNeutral => acc (\lam s r => \case r \with {})
  | app t s, appNeutral n a => neutralAppAcc n (neutralAcc n) a
  \where
    -- Для доказательства утверждения neutralAcc нам понадобится вспомогательное утверждение, которое говорит, что t s достижим, если t и s достижимы и t нейтрален.
    \func neutralAppAcc {V : \Type} {t s : Term V} (n : Neutral t)
                        (a1 : Acc Red1 t) (a2 : Acc Red1 s) : Acc Red1 (app t s)
      \elim a1, a2
      | acc f1 \as a1, acc f2 \as a2 => acc (\lam q r => \case \elim q, \elim r \with {
        | _, beta _ p _ => \case transport Neutral (sym p) n \with {}
        | app t' _, appLeft r1 idp => neutralAppAcc (neutralRed r1 n) (f1 t' r1) a2
        | app _ s', appRight idp r2 => neutralAppAcc n a1 (f2 s' r2)
      })

-- 15. Нейтральные термы.

-- Теперь определим отношение типизации на термах.
-- Для этого сначала определим тип типов просто типизированного лямбда исчисления.
\data Type
  | Arr Type Type
  | Unit

-- Отношение типизации определяется индуктивно обычным способом.
\data hasType {V : \Type} (ctx : V -> Type) (t : Term V) (T : Type) \elim t, T
  | var v, T => varType (ctx v = T)
  | app f a, B => appType {A : Type} (hasType ctx a A) (hasType ctx f (Arr A B))
  | lam t, Arr A B => lamType (hasType (maybe A ctx) t B)

-- 16. Типизируемые термы достижимы.

-- Чтобы доказать, что типизируемые термы достижимы, определим вспомогательный предикат "интерпретация T" для каждого типа T, удовлетворяющий следующим условиям:
-- * Если t имеет тип T, то t лежит в интерпретации T. Это утверждение останется в качетсве упражнения (typeableInterpId).
-- * Если t лежит в интерпретации T, то t достижим. Это доказывается индукцией по типу (interpAcc).

\func Interp {V : \Type} (T : Type) (t : Term V) : \Type \elim T
  | Unit => Acc Red1 t
  | Arr A B => \Pi (a : Term V) -> Interp A a -> Interp B (app t a)

-- Подтермы достижимого терма достижимы. Нам понадобится это утверждения для левого подтерма в аппликации.
\func appAccLeft {V : \Type} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t \elim a
  | acc f => acc (\lam t' r => appAccLeft (f (app t' s) (appLeft r idp)))

-- Одновременно с interpAcc мы докажем, что любой нейтральный терм лежим в интерпретации T.
\func neutralInterp {V : \Type} (T : Type) {t : Term V} (n : Neutral t) : Interp T t \elim T
  | Arr A B => \lam s sA => neutralInterp B (appNeutral n (interpAcc A s sA))
  | Unit => neutralAcc n

\func interpAcc {V : \Type} (T : Type) (t : Term V) (i : Interp T t) : Acc Red1 t \elim T
  | Unit => i
  | Arr A B => appAccLeft (interpAcc B (app t unit) (i unit (neutralInterp A unitNeutral)))

\func typeableAcc {V : \Type} (ctx : V -> Type) (t : Term V) (T : Type)
                  (h : hasType ctx t T) : Acc Red1 t
  => interpAcc T t (typeableInterpId ctx t T h)
