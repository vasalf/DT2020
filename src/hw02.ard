\import lect02 \hiding (+,*)
\open Nat \hiding (-,div) -- Здесь лежат + и *.

-- I. Задания на рекурсивные определения.

-- 1. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> a -> a -> a
   if True t _ = t
   if False _ e = e
-}
\func if {A : \Type} (b : Bool) (t e : A) : A \elim b
  | true  => t
  | false => e

-- 2. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool
  => if x true y

\func orTest1 : false || false = false => idp
\func orTest2 : false || true  = true  => idp
\func orTest3 : true  || false = true  => idp
\func orTest4 : true  || true  = true  => idp

-- 3. Определите возведение в степень и факториал для натуральных чисел.

-- По старой хаскеллевской привычке пишу хвосторекурсивные функции.
\func \infixr 8 ^ (x y : Nat) => pow' x y 1
  \where
    \func pow' (x y a : Nat) : Nat \elim y
      | 0      => a
      | suc y' => pow' x y' (x * a)

\func powTest1 : 2 ^ 3 = 8 => idp
\func powTest2 : 10 ^ 9 = 1000000000 => idp
\func powTest3 : 10 ^ 0 = 1 => idp
\func powTest4 : 0 ^ 179 = 0 => idp
\func powTest5 : 0 ^ 0 = 1 => idp

-- Тоже хвосторекурсивно, почему бы и нет?
\func fac (x : Nat) => fac' x 1
  \where
    \func fac' (x a : Nat) : Nat \elim x
      | 0      => a
      | suc x' => fac' x' ((suc x') * a) -- Для меня открытие, что x = suc x' не забинжен здесь.

\func facTest1 : fac 6 = 720 => idp
\func facTest2 : fac 1 = 1 => idp
\func facTest3 : fac 0 = 1 => idp

-- 4. Определите mod и gcd.

\func mod (x y : Nat) => mod' x x y
  \where
    \func mod' (s x y : Nat) : Nat \elim s
      | 0      => 0
      | suc s' => if (x < y) x (mod' s' (x - y) y)

\func modTest1 : mod 5 3 = 2 => idp
\func modTest2 : mod 21 8 = 5 => idp
\func modTest3 : mod 100 10 = 0 => idp
\func modTest4 : mod 10 0 = 0 => idp -- Не слишком эффективно по времени с точки зрения тайпчекинга
\func modTest5 : mod 0 0 = 0 => idp

\func \infixl 4 == (x : Nat) (y : Nat) : Bool
  => not (x < y) && not (y < x)

{-
  Мне не нравится эта реализация тем, что мне приходится самому без тайпчекинга доказывать, что цикл Евклида выполняется
  не больше y раз. Было бы круто это уметь тайпчекать. Достаточно было бы уметь выводить x `mod` y < y, что очевидно
  из реализации mod.
  Ну и угнетает меня if y == 0, повторённый, по сути, дважды (один раз в паттернматчинге). Непонятно, что с этим делать.
  Может, можно лучше?
 -}
\func gcd (x y : Nat) => gcd' y x y -- Гарантированно уменьшается второй аргумент, поэтому биндим его
  \where
    \func gcd' (s x y : Nat) : Nat \elim s
      | 0      => x
      | suc s' => if (y == 0) x (gcd' s' y (x `mod` y))

\func gcdTest1 : gcd 1 2 = 1 => idp
\func gcdTest2 : gcd 2 4 = 2 => idp
\func gcdTest3 : gcd 9 6 = 3 => idp
\func gcdTest4 : gcd 0 10 = 10 => idp
\func gcdTest5 : gcd 10 0 = 10 => idp
\func gcdTest6 : gcd 0 0 = 0 => idp

-- 5. Определите (полиморфный) reverse для списков.

\func reverse {A : \Type} (xs : List A) : List A => reverse' xs nil
  \where
    \func reverse' {A : \Type} (xs acc : List A) : List A \elim xs
      | nil       => acc
      | cons x xs => reverse' xs (cons x acc)

\func reverseTest1 : reverse (cons 1 (cons 2 (cons 3 nil))) = (cons 3 (cons 2 (cons 1 nil))) => idp
\func reverseTest2 : reverse {Int} nil = nil => idp

-- 6. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

-- Insertion sort
\func sort {A : \Type} (< : A -> A -> Bool) (xs : List A) : List A \elim xs
  | nil       => nil
  | cons x xs => insert < x (sort < xs)
    \where
      \func insert {A : \Type} (< : A -> A -> Bool) (x : A) (xs : List A) : List A \elim xs
        | nil       => cons x nil
        | cons y xs => if (x `<` y) (cons x (cons y xs)) (cons y (insert < x xs))

\func sortTest1
  : sort (<) (cons 5 (cons 3 (cons 1 (cons 4 (cons 2 nil)))))
  =          (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 nil))))) => idp
\func sortTest2
  : sort (<) (cons 1 (cons 3 (cons 1 (cons 4 (cons 10 nil)))))
  =          (cons 1 (cons 1 (cons 3 (cons 4 (cons 10 nil))))) => idp
\func sortTest3 : sort (<) nil = nil => idp